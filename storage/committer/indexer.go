/*
*   Copyright (c) 2024 Arcology Network

*   This program is free software: you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation, either version 3 of the License, or
*   (at your option) any later version.

*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.

*   You should have received a copy of the GNU General Public License
*   along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package statestore

import (
	"math"

	indexer "github.com/arcology-network/common-lib/storage/indexer"

	stgtype "github.com/arcology-network/storage-committer/common"
	"github.com/arcology-network/storage-committer/type/univalue"

	// interfaces "github.com/arcology-network/storage-committer/interfaces"
	interfaces "github.com/arcology-network/storage-committer/common"
)

// An index by path, transitions have the same path will be put together in a list
// This index will be used for apply transitions on the original state. So all the transitions
// should be put into this index.
func PathIndexer(store interfaces.ReadOnlyStore) *indexer.UnorderedIndexer[string, *univalue.Univalue, []*univalue.Univalue] {
	return indexer.NewUnorderedIndexer(
		nil,

		// Return the key for the path if it is missing.
		func(v *univalue.Univalue) (string, bool) {
			return *v.GetPath(), true
		},

		// The function to update the value when it exists.
		func(k string, v *univalue.Univalue) []*univalue.Univalue {
			if v.Value() != nil {
				v.Value().(stgtype.Type).Preload(k, store)
			}
			return []*univalue.Univalue{v}
		},

		func(_ string, v *univalue.Univalue, vals *[]*univalue.Univalue) { *vals = append(*vals, v) },
	)
}

// An index by tx number, transitions have the same tx number will be put together in a list.
// This index will be used to remove the transitions generated by the conflicting transactions.
// So, the immutable transitions should not be put into this index.
func TxIndexer(_ interfaces.ReadOnlyStore) *indexer.UnorderedIndexer[uint64, *univalue.Univalue, []*univalue.Univalue] {
	return indexer.NewUnorderedIndexer(
		nil,
		func(v *univalue.Univalue) (uint64, bool) {
			if !v.GetPersistent() {
				return v.GetTx(), true
			}
			return math.MaxUint32, false
		},
		func(_ uint64, v *univalue.Univalue) []*univalue.Univalue { return []*univalue.Univalue{v} },
		func(_ uint64, v *univalue.Univalue, vals *[]*univalue.Univalue) { *vals = append(*vals, v) },
	)
}
